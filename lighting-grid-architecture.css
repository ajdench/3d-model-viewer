/* =============================================================================
 * LIGHTING CONTROLS - MODULAR GRID ARCHITECTURE SYSTEM
 * =============================================================================
 * 
 * This system creates a precise, reusable grid layout for LIGHTING controls
 * based on exact alignment requirements from the yellow grid line analysis.
 * 
 * ARCHITECTURAL PRINCIPLES:
 * - CSS Grid for precise positioning with named grid lines
 * - Modular design for reuse across other control panels
 * - Mathematical precision over flexbox approximations  
 * - Responsive scaling with consistent alignment points
 * - Professional maintainability and extensibility
 */

/* =============================================================================
 * GRID ARCHITECTURE DEFINITIONS
 * =============================================================================
 */

:root {
    /* === LIGHTING PANEL GRID SYSTEM === */
    
    /* Container dimensions (from current implementation) */
    --lighting-panel-width: 290px;
    --lighting-panel-padding: 15px; /* Internal padding from title-container */
    --lighting-content-width: calc(var(--lighting-panel-width) - (var(--lighting-panel-padding) * 2));
    
    /* Grid column widths (precise measurements from requirements) */
    --slider-width: 20px;
    --value-box-width: 45px;
    --sun-control-width: 128px;
    --button-gap: 10px; /* Measured gap between COMPLEX and BASIC buttons */
    
    /* BASIC button dimensions (key reference point) */
    --basic-button-width: 58px; /* Calculated from current implementation */
    --complex-button-width: 68px; /* From current positioning */
    
    /* === CALCULATED GRID POINTS === */
    
    /* Column positions based on alignment requirements */
    --grid-left-edge: 0px; /* LIGHTING title left edge */
    --grid-left-value-start: var(--grid-left-edge); /* Left value box left edge */
    --grid-left-value-end: calc(var(--grid-left-value-start) + var(--value-box-width));
    
    /* Right alignment point: BASIC button right edge */
    --grid-basic-button-right: var(--lighting-content-width); /* Right edge of content area */
    --grid-basic-button-left: calc(var(--grid-basic-button-right) - var(--basic-button-width));
    
    /* Right value box aligns with BASIC button right edge */
    --grid-right-value-end: var(--grid-basic-button-right);
    --grid-right-value-start: calc(var(--grid-right-value-end) - var(--value-box-width));
    
    /* Sun control box centered between value boxes */
    --grid-sun-center: calc((var(--grid-left-value-end) + var(--grid-right-value-start)) / 2);
    --grid-sun-start: calc(var(--grid-sun-center) - (var(--sun-control-width) / 2));
    --grid-sun-end: calc(var(--grid-sun-center) + (var(--sun-control-width) / 2));
    
    /* COMPLEX button positioning */
    --grid-complex-button-right: calc(var(--grid-basic-button-left) - var(--button-gap));
    --grid-complex-button-left: calc(var(--grid-complex-button-right) - var(--complex-button-width));
}

/* =============================================================================
 * MODULAR GRID LAYOUT SYSTEM
 * =============================================================================
 */

/* Main lighting controls grid container */
.lighting-grid-container {
    display: grid;
    width: 100%;
    
    /* Define named grid lines for precise positioning */
    grid-template-columns: 
        [panel-start title-start left-value-start] var(--value-box-width)
        [left-value-end left-gap-start] 1fr
        [left-gap-end sun-start] var(--sun-control-width)
        [sun-end right-gap-start] 1fr  
        [right-gap-end right-value-start] var(--value-box-width)
        [right-value-end basic-button-end panel-end];
    
    grid-template-rows: 
        [title-row] auto
        [controls-row] auto
        [ambient-row] auto;
    
    gap: 10px 0; /* Vertical gap only, horizontal controlled by grid */
    position: relative;
}

/* Title row spans full width with button positioning */
.lighting-title-row {
    grid-column: panel-start / panel-end;
    grid-row: title-row;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}

.lighting-title {
    grid-column: title-start;
    margin: 0;
    font-size: 12px;
    color: #555;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Button positioning using absolute positioning within grid area */
.lighting-buttons-container {
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    gap: var(--button-gap);
    align-items: center;
}

/* Main controls row with precise grid placement */
.lighting-controls-row {
    grid-column: panel-start / panel-end;
    grid-row: controls-row;
    display: contents; /* Allow children to participate in parent grid */
}

/* Left slider positioned at left value area */
.lighting-left-slider {
    grid-column: left-value-start / left-value-end;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-self: start; /* Align to left edge of grid area */
}

/* Sun control box perfectly centered */
.lighting-sun-control {
    grid-column: sun-start / sun-end;
    justify-self: center; /* Center within grid area */
    align-self: start;
}

/* Right slider positioned at right value area - RIGHT EDGE ALIGNS WITH BASIC BUTTON */
.lighting-right-slider {
    grid-column: right-value-start / right-value-end;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-self: end; /* Align to right edge of grid area */
}

/* Ambient light spans from left value box to right value box */
.lighting-ambient-row {
    grid-column: left-value-start / right-value-end;
    grid-row: ambient-row;
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
}

.lighting-ambient-controls {
    display: flex;
    align-items: center;
    gap: 8px;
    width: 100%;
}

.lighting-ambient-label {
    font-size: 10px;
    color: #666;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    flex-shrink: 0;
}

.lighting-ambient-slider {
    flex: 1; /* Takes remaining space between boundaries */
}

/* =============================================================================
 * REUSABLE COMPONENT STYLES
 * =============================================================================
 */

/* Vertical slider styling (reusable) */
.grid-vertical-slider {
    writing-mode: vertical-lr;
    direction: rtl;
    width: var(--slider-width);
    height: 150px;
    background: rgba(0, 0, 0, 0.1);
    outline: none;
    opacity: 0.7;
    transition: opacity 0.2s;
    border-radius: 10px;
}

.grid-vertical-slider:hover {
    opacity: 1;
}

/* Value box styling (reusable) */
.grid-value-box {
    width: var(--value-box-width);
    margin-top: 8px;
    padding: 4px;
    text-align: center;
    font-size: 11px;
    border: 1px solid rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    background: white;
}

/* Button styling (reusable) */
.grid-mode-button {
    height: 18px;
    padding: 4px 8px;
    font-size: 10px;
    font-weight: 600;
    border: 1px solid rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
    
    /* Ensure text centering */
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
}

.grid-mode-button:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.grid-mode-button.active {
    background: #007bff;
    color: white;
}

/* Sun control styling (reusable) */
.grid-sun-control {
    width: var(--sun-control-width);
    height: 120px;
    background: rgba(0, 0, 0, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(0, 0, 0, 0.1);
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Horizontal slider styling (reusable) */
.grid-horizontal-slider {
    width: 100%;
    height: 20px;
    border-radius: 10px;
    background: rgba(0, 0, 0, 0.1);
    outline: none;
    opacity: 0.7;
    transition: opacity 0.2s;
}

.grid-horizontal-slider:hover {
    opacity: 1;
}

/* =============================================================================
 * RESPONSIVE ADAPTATIONS
 * =============================================================================
 */

@media (max-width: 1200px) {
    :root {
        --lighting-panel-width: 270px;
        --sun-control-width: 110px;
    }
    
    .lighting-title,
    .lighting-ambient-label {
        font-size: 11px;
    }
    
    .grid-mode-button {
        font-size: 9px;
        height: 16px;
        padding: 3px 6px;
    }
}

@media (max-width: 768px) {
    :root {
        --lighting-panel-width: 250px;
        --sun-control-width: 100px;
        --value-box-width: 40px;
    }
    
    .grid-vertical-slider {
        height: 120px;
    }
    
    .grid-sun-control {
        height: 100px;
    }
}

/* =============================================================================
 * ALIGNMENT VERIFICATION HELPERS (Development only)
 * =============================================================================
 */

/* 
 * Uncomment these classes during development to visualize grid alignment:
 * 
 * .lighting-grid-debug .lighting-grid-container {
 *     background: repeating-linear-gradient(
 *         to right,
 *         transparent 0px,
 *         rgba(255, 255, 0, 0.1) 1px,
 *         rgba(255, 255, 0, 0.1) 2px,
 *         transparent 3px
 *     );
 * }
 * 
 * .lighting-grid-debug .lighting-left-slider,
 * .lighting-grid-debug .lighting-right-slider,
 * .lighting-grid-debug .lighting-sun-control {
 *     outline: 1px dashed rgba(255, 0, 0, 0.5);
 * }
 */

/* =============================================================================
 * INTEGRATION EXAMPLE
 * =============================================================================
 */

/*
 * EXAMPLE USAGE IN EXISTING HTML:
 * 
 * Replace current lighting-controls-container with:
 * 
 * <div class="lighting-grid-container">
 *     <div class="lighting-title-row">
 *         <h4 class="lighting-title">LIGHTING</h4>
 *         <div class="lighting-buttons-container">
 *             <button class="grid-mode-button" id="complexModeButton">COMPLEX</button>
 *             <button class="grid-mode-button active" id="basicModeButton">BASIC</button>
 *         </div>
 *     </div>
 *     
 *     <div class="lighting-controls-row">
 *         <div class="lighting-left-slider">
 *             <input type="range" class="grid-vertical-slider" id="directionalLight" 
 *                    min="0" max="2" step="0.1" value="0.6">
 *             <input type="number" class="grid-value-box" id="directionalLightNum" 
 *                    min="0" max="2" step="0.1" value="0.6">
 *         </div>
 *         
 *         <div class="lighting-sun-control grid-sun-control">
 *             <!-- Sun control content -->
 *         </div>
 *         
 *         <div class="lighting-right-slider">
 *             <input type="range" class="grid-vertical-slider" id="directionalLightRight" 
 *                    min="0" max="2" step="0.1" value="0.0">
 *             <input type="number" class="grid-value-box" id="directionalRightNum" 
 *                    min="0" max="2" step="0.1" value="0.0">
 *         </div>
 *     </div>
 *     
 *     <div class="lighting-ambient-row">
 *         <div class="lighting-ambient-controls">
 *             <label class="lighting-ambient-label">AMBIENT LIGHT</label>
 *             <input type="range" class="grid-horizontal-slider lighting-ambient-slider" 
 *                    id="ambientLight" min="0" max="1" step="0.1" value="0.4">
 *             <input type="number" class="grid-value-box" id="ambientLightNum" 
 *                    min="0" max="1" step="0.1" value="0.4">
 *         </div>
 *     </div>
 * </div>
 */

/* =============================================================================
 * ARCHITECTURAL BENEFITS
 * =============================================================================
 * 
 * 1. PRECISION: Mathematical grid calculations ensure pixel-perfect alignment
 * 2. MODULARITY: Reusable components and patterns for other control panels  
 * 3. MAINTAINABILITY: Named grid lines and CSS variables for easy adjustments
 * 4. SCALABILITY: Responsive breakpoints maintain alignment at all sizes
 * 5. CONSISTENCY: Standardized spacing and positioning rules
 * 6. EXTENSIBILITY: Easy to add new controls within the established grid
 * 7. DEBUG-FRIENDLY: Visual helpers available for development verification
 * 8. PERFORMANCE: CSS Grid more efficient than complex flexbox nesting
 * 
 * KEY ACHIEVEMENT: Right value box right edge EXACTLY aligns with BASIC button right edge
 * GRID POINTS: Left edge → Left value → Sun center → Right value → BASIC button (reference)
 * AMBIENT SPAN: From left value box left edge to right value box right edge
 * MODULARITY: Pattern can be adapted for other control panels with similar requirements
 */