#!/usr/bin/env python3
"""
Automatic session logger - Generates session summary from git activity.
Run this at the end of each session or via git hooks.
"""
import subprocess
import datetime
import os
import sys
from pathlib import Path

def get_git_stats():
    """Gather git statistics for the current session."""
    # Get today's commits
    today = datetime.date.today().isoformat()
    commits = subprocess.run(
        ["git", "log", "--since", today, "--pretty=format:%h %s", "--no-merges"],
        capture_output=True, text=True
    ).stdout.strip().split('\n')
    
    # Get changed files
    changed_files = subprocess.run(
        ["git", "diff", "--name-status", f"@{{today}}"],
        capture_output=True, text=True
    ).stdout.strip()
    
    # Get diff stats
    stats = subprocess.run(
        ["git", "diff", "--shortstat", f"@{{today}}"],
        capture_output=True, text=True
    ).stdout.strip()
    
    return commits, changed_files, stats

def categorize_files(changed_files):
    """Categorize changed files by type."""
    categories = {
        'created': [],
        'modified': [],
        'deleted': [],
        'tests': [],
        'docs': [],
        'memory': []
    }
    
    for line in changed_files.split('\n'):
        if not line:
            continue
            
        status, filepath = line.split('\t', 1)
        
        if status == 'A':
            categories['created'].append(filepath)
        elif status == 'M':
            categories['modified'].append(filepath)
        elif status == 'D':
            categories['deleted'].append(filepath)
        
        # Special categories
        if 'test' in filepath.lower():
            categories['tests'].append(filepath)
        elif filepath.startswith('memory/'):
            categories['memory'].append(filepath)
        elif filepath.endswith('.md'):
            categories['docs'].append(filepath)
    
    return categories

def generate_session_summary():
    """Generate a session summary from git activity."""
    commits, changed_files, stats = get_git_stats()
    
    if not commits or commits == ['']:
        print("No commits found for today. Nothing to summarize.")
        return None
    
    categories = categorize_files(changed_files)
    
    # Build the summary
    summary = f"""# Current Session Summary - Auto-Generated from Git Activity

## üéØ Session Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}

## üìä Session Metrics
- **Commits**: {len(commits)}
- **Files Changed**: {stats}

## üöÄ Commits This Session
"""
    
    for commit in commits:
        if commit:
            summary += f"- {commit}\n"
    
    if categories['created']:
        summary += f"\n## üìÅ Files Created ({len(categories['created'])})\n"
        for f in categories['created']:
            summary += f"- `{f}`\n"
    
    if categories['modified']:
        summary += f"\n## ‚úèÔ∏è Files Modified ({len(categories['modified'])})\n"
        for f in categories['modified']:
            summary += f"- `{f}`\n"
    
    if categories['deleted']:
        summary += f"\n## üóëÔ∏è Files Deleted ({len(categories['deleted'])})\n"
        for f in categories['deleted']:
            summary += f"- `{f}`\n"
    
    if categories['tests']:
        summary += f"\n## üß™ Test Files Changed ({len(categories['tests'])})\n"
        for f in categories['tests']:
            summary += f"- `{f}`\n"
    
    if categories['memory']:
        summary += f"\n## üß† Memory Updates ({len(categories['memory'])})\n"
        for f in categories['memory']:
            summary += f"- `{f}`\n"
    
    summary += """
## ‚ö†Ô∏è Manual Updates Required
Please update this auto-generated summary with:
1. **What Was Built**: Describe features/components created
2. **Technical Decisions**: Document key choices made
3. **Issues & Resolutions**: Note any problems solved
4. **Next Steps**: What should happen next session

---
*Auto-generated by session-logger.py*
"""
    
    return summary

def main():
    """Main entry point."""
    summary = generate_session_summary()
    
    if not summary:
        return
    
    # Check if memory directory exists
    memory_dir = Path("memory")
    if not memory_dir.exists():
        memory_dir.mkdir(parents=True)
    
    # Save to current-session.md
    session_file = memory_dir / "current-session.md"
    
    # If file exists, create a backup
    if session_file.exists():
        backup_name = f"session-backup-{datetime.datetime.now().strftime('%Y%m%d-%H%M%S')}.md"
        backup_file = memory_dir / backup_name
        session_file.rename(backup_file)
        print(f"Backed up existing session to {backup_file}")
    
    # Write new session summary
    session_file.write_text(summary)
    print(f"Session summary written to {session_file}")
    print("\nPlease edit the file to add:")
    print("- Feature descriptions")
    print("- Technical decisions")
    print("- Issues encountered")
    print("- Next steps")

if __name__ == "__main__":
    main()
